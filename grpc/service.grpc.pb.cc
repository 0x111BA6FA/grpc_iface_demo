// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc/service.proto

#include "grpc/service.pb.h"
#include "grpc/service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Greeter_method_names[] = {
  "/Greeter/Command",
  "/Greeter/GetBytes",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Command_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBytes_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::Command(::grpc::ClientContext* context, const ::CommandRequest& request, ::CommandReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CommandRequest, ::CommandReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Command_, context, request, response);
}

void Greeter::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::CommandRequest* request, ::CommandReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CommandRequest, ::CommandReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::CommandRequest* request, ::CommandReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CommandReply>* Greeter::Stub::PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CommandReply, ::CommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Command_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CommandReply>* Greeter::Stub::AsyncCommandRaw(::grpc::ClientContext* context, const ::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::GetBytes(::grpc::ClientContext* context, const ::GetBytesRequest& request, ::GetBytesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetBytesRequest, ::GetBytesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBytes_, context, request, response);
}

void Greeter::Stub::experimental_async::GetBytes(::grpc::ClientContext* context, const ::GetBytesRequest* request, ::GetBytesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetBytesRequest, ::GetBytesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBytes_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetBytes(::grpc::ClientContext* context, const ::GetBytesRequest* request, ::GetBytesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBytes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetBytesReply>* Greeter::Stub::PrepareAsyncGetBytesRaw(::grpc::ClientContext* context, const ::GetBytesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetBytesReply, ::GetBytesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBytes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetBytesReply>* Greeter::Stub::AsyncGetBytesRaw(::grpc::ClientContext* context, const ::GetBytesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBytesRaw(context, request, cq);
  result->StartCall();
  return result;
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::CommandRequest, ::CommandReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CommandRequest* req,
             ::CommandReply* resp) {
               return service->Command(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GetBytesRequest, ::GetBytesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetBytesRequest* req,
             ::GetBytesReply* resp) {
               return service->GetBytes(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::Command(::grpc::ServerContext* context, const ::CommandRequest* request, ::CommandReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetBytes(::grpc::ServerContext* context, const ::GetBytesRequest* request, ::GetBytesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


